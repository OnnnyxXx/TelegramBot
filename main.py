from aiogram.dispatcher.filters import Text, Command
import requests
import datetime
# from bacrount import keep_alive
import aiogram
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from api_config import open_wake_token
from api_config import token_bot
from aiogram.dispatcher import FSMContext
from aiogram.types import Message
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.middlewares.logging import LoggingMiddleware

bot = Bot(token_bot)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
last_user_messages = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–Ω–æ–≤–∞" –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def create_city_retry_keyboard(user_id):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add()

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    last_message = last_user_messages.get(user_id)

    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if last_message:
        keyboard.add(last_message)

    return keyboard


@dp.message_handler(commands=['start'])
async def start_commands(message: types.Message):
    start_buttons = ['–ü–æ–≥–æ–¥–∞‚õÖÔ∏è']
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*start_buttons)
    await message.answer('–ü—Ä–∏–≤–µ—Ç! {0.first_name} üëã'.format(message.from_user), reply_markup=keyboard)


@dp.message_handler(Text(equals="–ü–æ–≥–æ–¥–∞‚õÖÔ∏è"))
async def get_weather(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ üåá –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã:")


@dp.message_handler(lambda message: message.text and not message.text.startswith('/'))
async def process_city(message: types.Message):
    city_name = message.text
    code_to_smile = {
        "Clear": "–Ø—Å–Ω–æ ‚òÄÔ∏è",
        "Clouds": "–û–±–ª–∞—á–Ω–æ ‚òÅÔ∏è",
        "Rain": "–î–æ–∂–¥—å üåß",
        "Drizzle": "–î–æ–∂–¥—å üåß",
        "Thunderstorm": "–ì—Ä–æ–∑–∞ ‚õà",
        "Snow": "–°–Ω–µ–≥ ‚ùÑÔ∏è",
        "Mist": "–¢—É–º–∞–Ω üå´"
    }

    try:
        response = requests.get(
            f"http://api.openweathermap.org/data/2.5/weather?q={city_name}&appid={open_wake_token}&units=metric"
        )
        data = response.json()

        if data["cod"] == 200:
            city = data["name"]
            cur_weather = data["main"]["temp"]
            weather_description = data["weather"][0]["main"]

            if weather_description in code_to_smile:
                wd = code_to_smile[weather_description]
            else:
                wd = "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ, –Ω–µ –ø–æ–π–º—É —á—Ç–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞!"

            humidity = data["main"]["humidity"]
            wind = data["wind"]["speed"]
            sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
            sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])
            length_of_the_day = datetime.datetime.fromtimestamp(
                data["sys"]["sunset"]) - datetime.datetime.fromtimestamp(
                data["sys"]["sunrise"])

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            last_user_messages[message.from_user.id] = city_name

            keyboard = create_city_retry_keyboard(message.from_user.id)

            await message.answer(f"{datetime.datetime.now().strftime('%H:%M %Y-%m-%d')}\n"
                                 f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n"
                                 f"{message.from_user.first_name} –ü–æ–≥–æ–¥–∞ –Ω–∞ —É–ª–∏—Ü–µ: {cur_weather}¬∞C {wd}\n"
                                 f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–í–µ—Ç–µ—Ä: {wind} –º/—Å\n"
                                 "-------------------------------------------\n"
                                 f"–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}\n–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å "
                                 f"–¥–Ω—è: {length_of_the_day}\n"
                                 f"–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è, {message.from_user.first_name} üòä",
                                 reply_markup=keyboard)
        else:
            await message.answer("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {str(e)}")


# keep_alive()
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)